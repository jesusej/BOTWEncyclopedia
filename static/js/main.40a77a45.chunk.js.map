{"version":3,"sources":["components/Monster.js","routes/Home.js","routes/ErrorPage.js","components/DynamicTable.js","routes/MonsterPage.js","App.js","reportWebVitals.js","index.js"],"names":["Monster","name","image","id","navigate","useNavigate","className","onClick","charAt","toUpperCase","slice","src","alt","Home","useState","monsters","setMonsters","searchWord","setSearchWord","useEffect","loadData","Axios","get","then","response","data","filteredMonsters","filter","monster","includes","toLowerCase","sort","a","b","length","type","placeholder","onChange","e","target","value","map","ErrorPage","DynamicTable","title","array","MonsterPage","useParams","setLoading","setMonster","loadEntry","console","log","description","common_locations","drops","App","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAceA,MAXf,YAAqC,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAAOC,EAAK,EAALA,GACzBC,EAAWC,cAEf,OACE,yBAAQC,UAAU,UAAUC,QAAS,WAAOH,EAAS,6BAAD,OAA8BD,KAAlF,UACE,+BAAKF,EAAKO,OAAO,GAAGC,cAAgBR,EAAKS,MAAM,GAA/C,OACA,qBAAKC,IAAKT,EAAOU,IAAKX,QCmDbY,MAxDf,WAAiB,IAAD,EAEkBC,mBAAS,IAF3B,mBAEPC,EAFO,KAEGC,EAFH,OAGsBF,mBAAS,IAH/B,mBAGPG,EAHO,KAGKC,EAHL,KAKdC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAW,WACfC,IAAMC,IAAI,kEAAkEC,MAAK,SAACC,GAChFR,EAAYQ,EAASC,KAAKA,UAIxBC,EAAmBX,EAASY,QAAO,SAACC,GACxC,OAAOA,EAAQ3B,KAAK4B,SAASZ,EAAWa,kBAO1C,OAJAJ,EAAiBK,MAAK,SAACC,EAAGC,GACxB,OAAOD,EAAE7B,GAAK8B,EAAE9B,MAGfY,EAASmB,OAAS,EAEjB,qBAAK5B,UAAU,OAAf,SACE,kDAMJ,sBAAKA,UAAU,OAAf,UACE,uBACE6B,KAAK,OACLC,YAAY,iBACZC,SAAU,SAACC,GACTpB,EAAcoB,EAAEC,OAAOC,UAG3B,kCACGd,EAAiBe,KAAI,SAACb,GACrB,OACE,cAAC,EAAD,CACE3B,KAAM2B,EAAQ3B,KACdC,MAAO0B,EAAQ1B,MACfC,GAAIyB,EAAQzB,IACPyB,EAAQzB,a,OC3CZuC,MANf,WACE,OACE,6CCeWC,MAjBf,YAAuC,IAAhBC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,MAC5B,OACE,kCACE,gCACE,6BAAKD,MAENC,EAAMJ,KAAI,SAAChB,GACV,OACE,6BACE,6BAAKA,aCgDFqB,MArDf,WAAwB,IAChB3C,EAAO4C,cAAP5C,GADe,EAESW,oBAAS,GAFlB,mBAELkC,GAFK,aAGSlC,mBAAS,MAHlB,mBAGdc,EAHc,KAGLqB,EAHK,KAKrB9B,qBAAU,WACR+B,OAGF,IAAMA,EAAY,WAChB7B,IAAMC,IAAN,6DAAgEnB,IAAMoB,MAAK,SAACC,GAC1EyB,EAAWzB,EAASC,KAAKA,MACzB0B,QAAQC,IAAI5B,EAASC,KAAKA,MAC1BuB,GAAW,OAIf,OAAIpB,EAEA,oCACE,+BAAKA,EAAQ3B,KAAKO,OAAO,GAAGC,cAAgBmB,EAAQ3B,KAAKS,MAAM,GAA/D,OACA,sBAAKJ,UAAU,UAAf,UACE,qBAAKK,IAAKiB,EAAQ1B,MAAOU,IAAKgB,EAAQ3B,OACtC,sBAAKK,UAAU,QAAf,UACE,wCAAWsB,EAAQ3B,QACnB,4BAAI2B,EAAQyB,iBAEd,qBAAK/C,UAAU,kBAAf,SACGsB,EAAQ0B,kBAAoB,cAAC,EAAD,CAC3BV,MAAM,mBACNC,MAAOjB,EAAQ0B,qBAGnB,qBAAKhD,UAAU,QAAf,SACGsB,EAAQ2B,MAAMrB,OAAS,GAAK,cAAC,EAAD,CAC3BU,MAAM,QACNC,MAAOjB,EAAQ2B,gBAazB,MC/BWC,MAnBf,WACE,OACE,sBAAKlD,UAAU,MAAf,UACE,iCACE,qDAEF,+BACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOmD,KAAK,oBAAoBC,QAAS,cAAC,EAAD,MACzC,cAAC,IAAD,CAAOD,KAAK,gCAAgCC,QAAS,cAAC,EAAD,MACrD,cAAC,IAAD,CAAOD,KAAK,IAAIC,QAAS,cAAC,EAAD,iBCJtBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtC,MAAK,YAAkD,IAA/CuC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.40a77a45.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nfunction Monster({name, image, id}) {\r\n  let navigate = useNavigate();\r\n\r\n  return (\r\n    <button className='monster' onClick={() => {navigate(`/BOTWEncyclopedia/monster/${id}`)}}>\r\n      <h2>{name.charAt(0).toUpperCase() + name.slice(1)} </h2>\r\n      <img src={image} alt={name} />\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default Monster","import Axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\nimport Monster from './../components/Monster';\r\n\r\nfunction Home() {\r\n  \r\n  const [monsters, setMonsters] = useState([]);\r\n  const [searchWord, setSearchWord] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    loadData();\r\n  }, [])\r\n  \r\n  const loadData = () => {\r\n    Axios.get(\"https://botw-compendium.herokuapp.com/api/v2/category/monsters\").then((response) => {\r\n      setMonsters(response.data.data);\r\n    })\r\n  }\r\n\r\n  const filteredMonsters = monsters.filter((monster) => {\r\n    return monster.name.includes(searchWord.toLowerCase());\r\n  })\r\n\r\n  filteredMonsters.sort((a, b) => {\r\n    return a.id - b.id;\r\n  })\r\n\r\n  if(monsters.length < 1){\r\n    return (\r\n      <div className='Home'>\r\n        <h3>Now loading...</h3>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"Home\">\r\n      <input \r\n        type='text' \r\n        placeholder='Type a monster' \r\n        onChange={(e) => {\r\n          setSearchWord(e.target.value);\r\n        }}\r\n      />\r\n      <section>\r\n        {filteredMonsters.map((monster) => {\r\n          return (\r\n            <Monster \r\n              name={monster.name} \r\n              image={monster.image}\r\n              id={monster.id}\r\n              key={monster.id}\r\n            />\r\n          );\r\n        })}\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react'\r\n\r\nfunction ErrorPage() {\r\n  return (\r\n    <div>ErrorPage</div>\r\n  )\r\n}\r\n\r\nexport default ErrorPage","import React from 'react'\r\n\r\nfunction DynamicTable({title, array}) {\r\n  return (\r\n    <table>\r\n      <thead>\r\n        <th>{title}</th>\r\n      </thead>\r\n      {array.map((data) => {\r\n        return (\r\n          <tr>\r\n            <td>{data}</td>\r\n          </tr>\r\n        );\r\n      })}\r\n    </table>\r\n  )\r\n}\r\n\r\nexport default DynamicTable","import React, { useState, useEffect } from 'react';\r\nimport Axios from 'axios';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport DynamicTable from '../components/DynamicTable';\r\n\r\nfunction MonsterPage() {\r\n  let { id } = useParams();\r\n  const [loading, setLoading] = useState(true);\r\n  const [monster, setMonster] = useState(null);\r\n\r\n  useEffect(() => {\r\n    loadEntry();\r\n  })\r\n  \r\n  const loadEntry = () => {\r\n    Axios.get(`https://botw-compendium.herokuapp.com/api/v2/entry/${id}`).then((response) => {\r\n      setMonster(response.data.data);\r\n      console.log(response.data.data);\r\n      setLoading(false);\r\n    })\r\n  }\r\n\r\n  if (monster) {\r\n    return (\r\n      <article>\r\n        <h2>{monster.name.charAt(0).toUpperCase() + monster.name.slice(1)} </h2>\r\n        <div className='content'>\r\n          <img src={monster.image} alt={monster.name} />\r\n          <div className='about'>\r\n            <h3>About {monster.name}</h3>\r\n            <p>{monster.description}</p>\r\n          </div>\r\n          <div className='commonLocations'>\r\n            {monster.common_locations && <DynamicTable \r\n              title=\"Common locations\"\r\n              array={monster.common_locations}\r\n            />}\r\n          </div>\r\n          <div className='drops'>\r\n            {monster.drops.length > 0 && <DynamicTable \r\n              title=\"Drops\"\r\n              array={monster.drops}\r\n            />}\r\n          </div>\r\n        </div>\r\n      </article>\r\n    );\r\n  }\r\n\r\n  if(loading){\r\n    <h2>Now loading...</h2>\r\n  }\r\n\r\n  return (\r\n    null\r\n  );\r\n}\r\n\r\nexport default MonsterPage;","import Home from './routes/Home';\r\nimport {BrowserRouter as Router, Routes, Route} from 'react-router-dom'\r\nimport ErrorPage from './routes/ErrorPage';\r\nimport MonsterPage from './routes/MonsterPage';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1>Hyrule's Monsters</h1>\r\n      </header>\r\n      <main>\r\n        <Router>\r\n          <Routes>\r\n            <Route path='/BOTWEncyclopedia' element={<Home />} />\r\n            <Route path='/BOTWEncyclopedia/monster/:id' element={<MonsterPage />}/>\r\n            <Route path='*' element={<ErrorPage />}/>\r\n          </Routes>\r\n        </Router>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}