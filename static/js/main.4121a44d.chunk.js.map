{"version":3,"sources":["components/Monster.js","App.js","reportWebVitals.js","index.js"],"names":["Monster","name","image","description","className","charAt","toUpperCase","slice","src","alt","App","useState","isLoading","setIsLoading","monsters","setMonsters","searchWord","setSearchWord","useEffect","loadData","Axios","get","then","response","data","filteredMonsters","filter","monster","includes","toLowerCase","type","placeholder","onChange","e","target","value","map","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMAkBeA,MAVf,YAA8C,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,YAC7B,OACE,0BAASC,UAAU,UAAnB,UACE,+BAAKH,EAAKI,OAAO,GAAGC,cAAgBL,EAAKM,MAAM,GAA/C,OACA,qBAAKC,IAAKN,EAAOO,IAAKR,IACtB,8BAAIE,EAAJ,WCmDSO,MA5Df,WAAgB,IAAD,EAEqBC,oBAAS,GAF9B,mBAENC,EAFM,KAEKC,EAFL,OAGmBF,mBAAS,IAH5B,mBAGNG,EAHM,KAGIC,EAHJ,OAIuBJ,mBAAS,IAJhC,mBAINK,EAJM,KAIMC,EAJN,KAMbC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAW,WACfC,IAAMC,IAAI,kEAAkEC,MAAK,SAACC,GAChFR,EAAYQ,EAASC,KAAKA,MAC1BX,GAAa,OAIXY,EAAmBX,EAASY,QAAO,SAACC,GACxC,OAAOA,EAAQ1B,KAAK2B,SAASZ,EAAWa,kBAG1C,OAAGjB,EAEC,qBAAKR,UAAU,MAAf,SACE,mCACE,mDACA,qDAON,sBAAKA,UAAU,MAAf,UACE,mCACE,mDACA,uBACE0B,KAAK,OACLC,YAAY,iBACZC,SAAU,SAACC,GACThB,EAAcgB,EAAEC,OAAOC,aAI7B,kCACGV,EAAiBW,KAAI,SAACT,GACrB,OACE,cAAC,EAAD,CACE1B,KAAM0B,EAAQ1B,KACdC,MAAOyB,EAAQzB,MACfC,YAAawB,EAAQxB,aAChBwB,EAAQU,aC3CZC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4121a44d.chunk.js","sourcesContent":["/*\r\nname\r\nimage\r\ndescription\r\n*/\r\n\r\nimport React from 'react'\r\n\r\nfunction Monster({name, image, description}) {\r\n  return (\r\n    <article className='monster'>\r\n      <h2>{name.charAt(0).toUpperCase() + name.slice(1)} </h2>\r\n      <img src={image} alt={name} />\r\n      <p>{description} </p>\r\n    </article>\r\n  )\r\n}\r\n\r\nexport default Monster","import Axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport Monster from './components/Monster';\n\nfunction App() {\n  \n  const [isLoading, setIsLoading] = useState(true);\n  const [monsters, setMonsters] = useState([]);\n  const [searchWord, setSearchWord] = useState(\"\");\n\n  useEffect(() => {\n    loadData();\n  }, [])\n  \n  const loadData = () => {\n    Axios.get(\"https://botw-compendium.herokuapp.com/api/v2/category/monsters\").then((response) => {\n      setMonsters(response.data.data);\n      setIsLoading(false);\n    })\n  }\n\n  const filteredMonsters = monsters.filter((monster) => {\n    return monster.name.includes(searchWord.toLowerCase());\n  })\n\n  if(isLoading){\n    return (\n      <div className='App'>\n        <header>\n          <h1>Hyrule's Monsters</h1>\n          <h3>Now loading...</h3>\n        </header>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Hyrule's Monsters</h1>\n        <input \n          type='text' \n          placeholder='Type a monster' \n          onChange={(e) => {\n            setSearchWord(e.target.value);\n          }}\n        />\n      </header>\n      <section>\n        {filteredMonsters.map((monster) => {\n          return (\n            <Monster \n              name={monster.name} \n              image={monster.image} \n              description={monster.description}\n              key={monster.id}\n            />\n          );\n        })}\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}